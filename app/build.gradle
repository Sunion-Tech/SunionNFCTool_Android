plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
}

ext {
    archivesBaseName = "SunionNFCTool"

    versionMajor = 1

    versionMinor = 0

    versionPatch = 0

    versionBuild = 0
}

android {
    namespace 'com.example.sunionnfctool'
    compileSdk 35

    signingConfigs {
        def keystorePropertiesFile
        def keystoreProperties = new Properties()

        SunionNFCTool {
            keystorePropertiesFile = rootProject.file("../Config/SunionNFCTool/keystore.properties")
            keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    defaultConfig {
        applicationId "com.example.sunionnfctool"
        minSdk 26
        targetSdk 35
        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}.${versionBuild}"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }

        Properties properties = new Properties()
        properties.load(project.rootProject.file('../Config/SunionNFCTool/secure.properties').newDataInputStream()) // load local.properties
        buildConfigField "String", 'API_GATEWAY_ENDPOINT', properties.getProperty('API_GATEWAY_ENDPOINT')
        signingConfig signingConfigs.SunionNFCTool
        resConfigs "en", "zh-rTW"
    }

    buildTypes {
        debug{
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        release {
            minifyEnabled false
            multiDexEnabled true
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = "$archivesBaseName-${variant.baseName}-${variant.versionCode}-${variant.versionName}.apk"
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        compose true
        buildConfig true
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
}

dependencies {

    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidx.material3
    implementation libs.material
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation platform(libs.androidx.compose.bom)
    androidTestImplementation libs.androidx.ui.test.junit4
    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest
    implementation libs.androidx.navigation.compose
    implementation libs.androidx.hilt.navigation.compose
    implementation libs.androidx.material

    // Http client
    implementation libs.retrofit
    implementation libs.converter.gson
    implementation libs.logging.interceptor
    implementation(libs.okhttp)
    implementation(libs.gson)

    // log
    implementation libs.timber
}